buildscript {
    ext {
        springBootVersion = "2.0.6.RELEASE"
        springfoxSwaggerVersion = "2.9.2"
        lombokVersion = "1.18.4"
        problemVersion = "0.24.0-RC.0"
        hibernateVersion = "5.2.17.Final"
        jjwtVersion = "0.10.5"
        javafakerVersion = "0.16"
        testcontainersVersion = "1.10.4"
        tikaCoreVersion = "1.3.2"
        hibernateTypes52Version = "2.4.0"

        basePackage = "com.guess"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.0.6.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com'
version = '0.1'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

apply from: "gradle/swagger.gradle"

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation ("org.springframework.boot:spring-boot-configuration-processor")
    implementation("org.springframework.boot:spring-boot-devtools")
    implementation "org.zalando:problem-spring-web:${problemVersion}"
    implementation("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}") {
        exclude module: "springfox-spring-web"
    }
    compile "org.apache.commons:commons-lang3"
    compile group: 'org.apache.tika', name: 'tika-core', version: '1.19.1'
    implementation("org.projectlombok:lombok")
    implementation("org.postgresql:postgresql")
    compile group: 'org.hibernate', name: 'hibernate-java8', version: "${hibernateVersion}"
    implementation("com.vladmihalcea:hibernate-types-52:${hibernateTypes52Version}")
    implementation('org.flywaydb:flyway-core')
    compile "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtime "io.jsonwebtoken:jjwt-impl:${jjwtVersion}",
            "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    testImplementation "com.github.javafaker:javafaker:${javafakerVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
}
